// =============================================================================
// VentyLab Prisma Schema
// Medical Ventilation Education Platform - Complete Database Schema
// =============================================================================
// This schema defines all models for the VentyLab platform, including:
// - User management and authentication
// - Module and lesson structure
// - Learning progress tracking
// - Quiz and assessment system
// - Gamification with achievements
// - Learning session analytics
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // For development with SQLite (no setup required):
  provider = "sqlite"

  // For production with PostgreSQL (recommended):
  // provider = "postgresql"

  url = env("DATABASE_URL")
}

// =============================================================================
// ENUMS (For PostgreSQL)
// =============================================================================
// Note: SQLite doesn't support native enums. When using PostgreSQL,
// uncomment these enums and change the corresponding String fields to enum types.

// enum UserRole {
//   STUDENT
//   TEACHER
//   ADMIN
// }

// enum ModuleCategory {
//   FUNDAMENTALS
//   VENTILATION_PRINCIPLES
//   CLINICAL_APPLICATIONS
//   ADVANCED_TECHNIQUES
//   TROUBLESHOOTING
//   PATIENT_SAFETY
// }

// enum ModuleDifficulty {
//   BEGINNER
//   INTERMEDIATE
//   ADVANCED
// }

// enum AchievementType {
//   FIRST_LESSON
//   MODULE_COMPLETE
//   STREAK_7_DAYS
//   STREAK_30_DAYS
//   MASTER_LEVEL
//   PERFECT_QUIZ
//   SPEED_LEARNER
//   DEDICATED_STUDENT
// }

// =============================================================================
// USER MODELS
// =============================================================================

/// User model - Represents all users in the system (students, teachers, admins)
/// Handles authentication, authorization, and user profile information
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password using bcryptjs (never store plain text!)
  name      String
  role      String   @default("STUDENT") // Values: STUDENT, TEACHER, ADMIN (use UserRole enum with PostgreSQL)
  avatar    String?  // Optional URL to user's avatar image
  bio       String?  // Optional user biography
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  learningProgress LearningProgress[] // User's progress across all modules
  quizAttempts     QuizAttempt[]      // User's quiz attempts
  learningSessions LearningSession[]  // User's learning sessions
  achievements     Achievement[]      // User's unlocked achievements

  @@index([email])
  @@index([role])
  @@map("users")
}

// =============================================================================
// MODULE AND LESSON MODELS
// =============================================================================

/// Module model - Represents a learning module (e.g., "Introduction to Mechanical Ventilation")
/// Modules contain multiple lessons and can have prerequisites
model Module {
  id            String   @id @default(cuid())
  title         String
  description   String?  // Detailed description of module content
  order         Int      // Display order in the curriculum
  category      String   // Values: FUNDAMENTALS, VENTILATION_PRINCIPLES, etc. (use ModuleCategory enum with PostgreSQL)
  difficulty    String   // Values: BEGINNER, INTERMEDIATE, ADVANCED (use ModuleDifficulty enum with PostgreSQL)
  estimatedTime Int      // Estimated completion time in minutes
  isActive      Boolean  @default(true) // Soft delete flag - inactive modules are hidden
  thumbnail     String?  // Optional URL to module thumbnail image
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  lessons          Lesson[]           // Lessons within this module
  learningProgress LearningProgress[] // User progress for this module

  // Self-referential many-to-many for prerequisites
  prerequisites    ModulePrerequisite[] @relation("ModuleToPrerequisite")
  dependentModules ModulePrerequisite[] @relation("PrerequisiteToModule")

  @@index([category])
  @@index([difficulty])
  @@index([isActive])
  @@index([order])
  @@map("modules")
}

/// ModulePrerequisite - Junction table for module prerequisites
/// Defines which modules must be completed before starting another module
model ModulePrerequisite {
  id             String @id @default(cuid())
  moduleId       String
  prerequisiteId String

  // Relations
  module       Module @relation("ModuleToPrerequisite", fields: [moduleId], references: [id], onDelete: Cascade)
  prerequisite Module @relation("PrerequisiteToModule", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([moduleId, prerequisiteId]) // Prevent duplicate prerequisites
  @@index([moduleId])
  @@index([prerequisiteId])
  @@map("module_prerequisites")
}

/// Lesson model - Individual lessons within a module
/// Contains the actual learning content (text, images, videos, etc.)
model Lesson {
  id            String   @id @default(cuid())
  moduleId      String
  title         String
  content       String   // JSON string containing structured lesson content (use Json type with PostgreSQL)
  order         Int      // Order within the module
  estimatedTime Int      // Estimated completion time in minutes
  aiGenerated   Boolean  @default(false) // Flag if content was AI-generated
  sourcePrompt  String?  // Optional: The AI prompt used to generate this lesson
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[] // User progress for this lesson
  quizzes        Quiz[]           // Quizzes embedded in this lesson

  @@index([moduleId])
  @@index([order])
  @@map("lessons")
}

// =============================================================================
// PROGRESS TRACKING MODELS
// =============================================================================

/// LearningProgress - Tracks user's overall progress in a module
/// One record per user per module
model LearningProgress {
  id          String    @id @default(cuid())
  userId      String
  moduleId    String
  completedAt DateTime? // When the user completed the entire module
  timeSpent   Int       @default(0) // Total time spent in minutes
  score       Float?    // Overall score/grade for the module (0-100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[] // Detailed progress for each lesson

  @@unique([userId, moduleId]) // One progress record per user per module
  @@index([userId])
  @@index([moduleId])
  @@index([completedAt])
  @@map("learning_progress")
}

/// LessonProgress - Tracks user's progress for individual lessons
/// Provides granular tracking of which lessons have been completed
model LessonProgress {
  id           String    @id @default(cuid())
  progressId   String    // References LearningProgress
  lessonId     String
  completed    Boolean   @default(false)
  timeSpent    Int       @default(0) // Time spent on this lesson in minutes
  lastAccessed DateTime? // Last time user accessed this lesson
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  learningProgress LearningProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  lesson           Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([progressId, lessonId]) // One progress record per lesson per user
  @@index([progressId])
  @@index([lessonId])
  @@index([completed])
  @@map("lesson_progress")
}

// =============================================================================
// QUIZ AND ASSESSMENT MODELS
// =============================================================================

/// Quiz - Questions integrated into lessons for knowledge assessment
/// Can be multiple choice, true/false, or other question types
model Quiz {
  id            String @id @default(cuid())
  lessonId      String
  question      String // The question text
  options       String // JSON array of answer options (use Json type with PostgreSQL)
  correctAnswer String // The correct answer (must match one of the options)
  explanation   String? // Optional explanation of why the answer is correct
  order         Int     // Order of quiz within the lesson
  points        Int     @default(10) // Points awarded for correct answer
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  lesson       Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[] // User attempts for this quiz

  @@index([lessonId])
  @@index([order])
  @@map("quizzes")
}

/// QuizAttempt - Records each user's attempt at answering a quiz question
/// Allows tracking of learning patterns and areas needing improvement
model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  answer      String   // The answer provided by the user
  isCorrect   Boolean  // Whether the answer was correct
  timeSpent   Int?     // Optional: Time taken to answer in seconds
  attemptedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@index([isCorrect])
  @@index([attemptedAt])
  @@map("quiz_attempts")
}

// =============================================================================
// ANALYTICS AND SESSION TRACKING
// =============================================================================

/// LearningSession - Tracks individual study sessions
/// Useful for analytics and understanding user engagement patterns
model LearningSession {
  id              String    @id @default(cuid())
  userId          String
  startTime       DateTime  @default(now())
  endTime         DateTime? // Null if session is still active
  duration        Int?      // Duration in minutes (calculated when endTime is set)
  modulesAccessed String?   // Comma-separated list of module IDs accessed (use String[] array with PostgreSQL)
  lessonsViewed   Int       @default(0) // Number of lessons viewed in this session
  quizzesTaken    Int       @default(0) // Number of quizzes attempted in this session

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startTime])
  @@map("learning_sessions")
}

// =============================================================================
// GAMIFICATION MODELS
// =============================================================================

/// Achievement - Badges and achievements for gamification
/// Motivates users by recognizing milestones and accomplishments
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // Values: FIRST_LESSON, MODULE_COMPLETE, STREAK_7_DAYS, etc. (use AchievementType enum with PostgreSQL)
  title       String   // Display title of the achievement
  description String   // Description of what was accomplished
  icon        String?  // Optional icon identifier or URL
  points      Int      @default(0) // Points awarded for this achievement
  unlockedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([unlockedAt])
  @@map("achievements")
}

// =============================================================================
// MIGRATION NOTES
// =============================================================================
// When migrating from SQLite to PostgreSQL:
// 1. Change datasource provider to "postgresql"
// 2. Uncomment the enum definitions at the top
// 3. Replace String fields with their corresponding enum types:
//    - User.role: String → UserRole
//    - Module.category: String → ModuleCategory
//    - Module.difficulty: String → ModuleDifficulty
//    - Achievement.type: String → AchievementType
// 4. Change Json-like String fields to actual Json type:
//    - Lesson.content: String → Json
//    - Quiz.options: String → Json
// 5. Change String arrays to actual arrays:
//    - LearningSession.modulesAccessed: String? → String[]
// 6. Run: prisma migrate dev --name switch_to_postgresql
// =============================================================================
